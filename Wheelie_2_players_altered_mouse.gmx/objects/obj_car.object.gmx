<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_car</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>godmode = false;
/*
I tried to replicate like the game you sent me, i used a timer to
count how long it would take to accelerate from 0 to top speed on
both gears, and how long both of them took to deaccelerate until cruise speed.

Also came up with a way to simulate a real engine torque formula, lower rpms
means less power, higher rpms, higher power (i'm not using RPMs on the coding
but a way to simulate the same effect). In the project, less velocity means less torque
the closer you are to the top speed, the higher torque it has.
*/
invincibility = 0;//timer

crashed = false;

engine_sound = audio_play_sound(snd_engine,1,1);

kill_engine_time = 0;


speed_x = 0;
speed_y = 0;

timer_to_topspeed = 0;//test
timer_to_deaccelerate = 0;//test
timer_to_deaccelerate_toggle = false;//test

gear = 1;
window_mouse_set(display_get_gui_width()/2,display_get_gui_height()/2);
mouse_last_x = device_mouse_raw_x(0);

//Vars from INI
pixelsForPoint = INI.pixelsForPoint;// move 10 pixels to earn 1 point

sides_sensivity = INI.sides_sensivity;
change_gear_timing = INI.change_gear_timing;// how many seconds to kill engine power when switching gear(simulates a real shifting)
cruise_speed = INI.cruise_speed; // when not accelerating, will cruise at this speed

// 1st gear stats
gear_stats[0,0] = INI.gear_stats[0,0];//top speed
gear_stats[0,1] = INI.gear_stats[0,1];//acceleration threshold // smaller = less acceleration
gear_stats[0,2] = INI.gear_stats[0,2];//Deacceleration Threshold // smaller = deaccelerates slower

gear_stats[1,0] = INI.gear_stats[1,0];//top speed
gear_stats[1,1] = INI.gear_stats[1,1];//acceleration threshold // smaller = less acceleration
gear_stats[1,2] = INI.gear_stats[1,2];//Deacceleration Threshold // smaller = deaccelerates slower

pitch_base = INI.pitch_base;
pitch_divider = INI.pitch_divider;

// Init after vars
pixelsLeftForPoint = pixelsForPoint;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_stop_sound(engine_sound);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if crashed
{
    speed_x = 0;
}

if speed_x == 0
{
    image_speed = 0;
}
else
{
    image_speed = clamp(speed_x/10,0,1);
}

pixelsLeftForPoint -= speed_x;
while( pixelsLeftForPoint &lt;= 0)
{
    pixelsLeftForPoint += pixelsForPoint;
    controller.SCORE[global.turn] ++;
    if controller.SCORE[global.turn] &gt; 999
    {
        controller.SCORE[global.turn] = 0
    }
}

// move to side
var dy = mouse_last_x - device_mouse_raw_x(0);
if dy != 0
{
    y -= dy*sides_sensivity;
    mouse_last_x = device_mouse_raw_x(0);
}
limit_y_border();

var eng_sound_p = (speed_x/gear_stats[gear-1,0]);
var pitch = eng_sound_p/pitch_divider+pitch_base;
//show_debug_message(pitch)
audio_sound_pitch(engine_sound,pitch);

controller.countdown -= (1/room_speed);
if controller.countdown &lt;= 0
{
    controller.countdown = 0;
    controller.game_ended = true;
    Background.game_started = false;
    instance_destroy();
    controller.alarm[0] = 1;
    exit;
}

if kill_engine_time &gt; 0
{
    kill_engine_time -= 1/room_speed;
    if kill_engine_time &lt;= 0
    {
        kill_engine_time = 0;
    }
}

if keyboard_check(INI.key_accelerate) and kill_engine_time == 0
{
    // 0 to top speed
    // 1 = 2 seconds to top speed
    // 2 = 8 seconds
    
    // deacceleration
    //first gear from top speed: 1.66
    //2nd : 2.20
    
    // accelerate til top speed of current gear
    var g = gear - 1;
    if speed_x &lt; gear_stats[g,0]
    {
        var accThreshold = gear_stats[g,1];
        var spdDistance = clamp(speed_x / gear_stats[g,0],0.05,1);
        timer_to_topspeed++
        speed_x += accThreshold*spdDistance;
        if speed_x &gt; gear_stats[g,0]
        {
            speed_x = gear_stats[g,0];
            timer_to_deaccelerate_toggle = true;
            show_debug_message(timer_to_topspeed/room_speed)
        }
    }
    else if speed_x &gt; gear_stats[g,0]// if reduced gear , deaccelerate till the top speed of current gear
    {
        car_deaccelerate(gear_stats[g,0]);
    }
}
else
{
    // deaccelerate
    car_deaccelerate(cruise_speed);
}


if keyboard_check_pressed(INI.key_switchgear)
{
    if speed_x &gt; 0
    {
        kill_engine_time = change_gear_timing;
    }
    
    if gear == 1
    {
        gear = 2;
    }
    else
    {
        gear = 1;
    }
}

// crash
if invincibility &lt;= 0
{
    if crashed == false and godmode == false
    {
        if collision_rectangle(x-sprite_width*0.5,y-sprite_height*0.5,x+sprite_width*0.5,y+sprite_height*0.5,obj_enemy,1,1)
        or controller.countdown &lt;= 0
        {
            audio_play_sound(snd_crash,1,0);
            crashed = true;
            FlashEffect.flashTimer = FlashEffect.crash_flash_interval*room_speed
            FlashEffect.flashTimesLeft = FlashEffect.crash_flash_times;
            speed_x = 0;
            controller.before_crash_gear = gear;
        }
    }
}
else
{
    invincibility -= 1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
